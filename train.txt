from detectron2.data.datasets import register_coco_instances
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
from detectron2.engine import DefaultTrainer
from detectron2.evaluation import COCOEvaluator
from detectron2 import model_zoo
import os, torch
from fvcore.common.checkpoint import Checkpointer
from detectron2.engine import BestCheckpointer
from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True

import numpy as np
from detectron2.structures import BoxMode
from detectron2.data import detection_utils as utils
from detectron2.data import build_detection_test_loader, build_detection_train_loader

def save_cfg(cfg, output_path):    
    with open(output_path,'w')as f: 
        f.write(cfg.dump())

# ----------------------------------
train_ds_name = "train_ver1"
val_ds_name = "val_ver1"
total_iteration = 6000
eval_period = 500
device = 'cuda:0'
output_dir = 'cimc_tiff_train1'
#-----------------------------------
register_coco_instances(train_ds_name, {}, "C:\\work\\CIMC_Data\\COCO_CIMC_RR\\annotations\\instances_train2017.json", "C:\\work\\CIMC_Data\\COCO_CIMC_RR\\train2017")
register_coco_instances(val_ds_name, {}, "C:\\work\\CIMC_Data\\COCO_CIMC_RR\\annotations\\instances_test2017.json","C:\\work\\CIMC_Data\\COCO_CIMC_RR\\test2017")
cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
# #save_cfg(cfg, "model.yaml")
# cfg.merge_from_file("model.yaml")
cfg.DATASETS.TRAIN = (train_ds_name,)
cfg.DATASETS.TEST = (val_ds_name,)
cfg.DATALOADER.NUM_WORKERS = 2
cfg.DATALOADER.FILTER_EMPTY_ANNOTATIONS = False
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.0015
cfg.SOLVER.MAX_ITER = total_iteration
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128 
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1
cfg.MODEL.DEVICE = device
cfg.TEST.EVAL_PERIOD = eval_period
cfg.OUTPUT_DIR = output_dir
os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
class ImgaugMapper:
    
    def __init__(self):
        pass
    def __call__(self, dataset_dict):

        image_aug = utils.read_image(dataset_dict["file_name"], format="BGR") 
        new_annos = []
        for obj in dataset_dict["annotations"]:
            x, y, w, h = obj["bbox"]
            rle = obj["segmentation"]
            new_annos.append({"bbox_mode": BoxMode.XYXY_ABS, 
                              "category_id": int(obj['category_id']),
                              "bbox":[np.float64(x), np.float64(y), np.float64(x+w), np.float64(y+h)],
                              'segmentation':rle
                              })
        dataset_dict["image"] = torch.as_tensor(image_aug.transpose(2, 0, 1).copy())
        dataset_dict["instances"] = utils.annotations_to_instances(new_annos, image_aug.shape[:2])
        return dataset_dict

class CocoTrainer(DefaultTrainer):
    
    @classmethod
    def build_train_loader(cls, cfg, sampler=None):
        return build_detection_train_loader(cfg, mapper=ImgaugMapper(), sampler=sampler)
    @classmethod
    def build_evaluator(cls, cfg, dataset_name, output_folder=None):
        if output_folder is None:
            os.makedirs(os.path.join(cfg.OUTPUT_DIR,"coco_eval"), exist_ok=True)
            output_folder = os.path.join(cfg.OUTPUT_DIR,"coco_eval")
        return COCOEvaluator(dataset_name, cfg, False, output_folder)
    
    def build_hooks(self):
        hooks = super().build_hooks()
        bestcheckpointer = Checkpointer(model=self.model,save_dir=self.cfg.OUTPUT_DIR)
        hooks.insert(-1,BestCheckpointer(self.cfg.TEST.EVAL_PERIOD, bestcheckpointer, "segm/AP", mode='max'))
        return hooks
    
if __name__ == '__main__':
    with open("org_model-config.yaml", "w") as f:
        f.write(cfg.dump())
    trainer = CocoTrainer(cfg)
    trainer.resume_or_load(resume=True)
    trainer.train()
